<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhdzb</title>
  
  
  <link href="https://zhdzb.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhdzb.github.io/"/>
  <updated>2023-05-09T08:00:39.287Z</updated>
  <id>https://zhdzb.github.io/</id>
  
  <author>
    <name>z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>token无感刷新</title>
    <link href="https://zhdzb.github.io/2022/09/01/token%E6%97%A0%E6%84%9F%E5%88%B7%E6%96%B0/"/>
    <id>https://zhdzb.github.io/2022/09/01/token%E6%97%A0%E6%84%9F%E5%88%B7%E6%96%B0/</id>
    <published>2022-08-31T16:00:00.000Z</published>
    <updated>2023-05-09T08:00:39.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>开发合同管理系统时，要求用户前端登录后，后端提供一个 token 和 token 的有效时间，当 token 过期时要求使用旧 token 获取新 token，前端无痛刷新 token。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>后端返回的 token 和 token 有效时间存储在 localStorage 中；</li><li>其中 token 有效时间是一个时间段，而不能是服务器的绝对时间，因为服务器绝对时间可能与前段时间存在出入；</li><li>用户登录后发起一个请求时，首先判断 token 是否过期，如果已过期则先调用 refresh-token 方法，更新 token 后再发送请求；</li><li>在向后端请求新 token 的时间段内如果有新的请求，则缓存这个时间段内的请求，等待刷新 token 后<strong>按序发送</strong>。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>如果请求拦截器返回了一个 <code>undefined</code>、<code>null</code> 或者没有返回任何值，那么请求就会被拦截并停止发送。如果请求拦截器返回了一个新的 <code>config</code> 对象，则请求将使用这个新的 <code>config</code> 对象进行发送。如果请求拦截器返回了一个 <code>Promise</code> 对象，那么请求会在该 <code>Promise</code> 对象 resolve 后才会继续进行。如果请求拦截器抛出了一个错误或返回了一个 rejected 的 <code>Promise</code> 对象，则请求会被停止并且会进入 axios 的 error 处理流程。</p></blockquote><p>在 axios 的请求拦截器中判断 token 是否有效。若有效则继续发送请求；否则刷新 token 后重试。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-发送请求前，对请求的配置进行拦截处理"><a href="#1-发送请求前，对请求的配置进行拦截处理" class="headerlink" title="1. 发送请求前，对请求的配置进行拦截处理"></a>1. 发送请求前，对请求的配置进行拦截处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求前先进行拦截</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里不单单是获取到token，还要一个token的过期时间，用来进行下面的判断</span></span><br><span class="line">    <span class="keyword">const</span> tokenInfo = <span class="title function_">getToken</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里模拟一下tokenInfo的结构</span></span><br><span class="line"><span class="comment">     * tokenInfo：&#123;</span></span><br><span class="line"><span class="comment">     * token:&#x27;fdasfeffafdsfasfdasfdas&#x27;,</span></span><br><span class="line"><span class="comment">     * tokenExpireTime:&#x27;36000&#x27;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//这里先拿到token，给每个请求添加一个token请求头</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = tokenInfo.<span class="property">token</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：登录接口和刷新token接口是不需要token的</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      config.<span class="property">url</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;/refreshToken&#x27;</span>) &gt;= <span class="number">0</span> ||</span><br><span class="line">      config.<span class="property">url</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;/login&#x27;</span>) &gt;= <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是拦截的关键代码</span></span><br><span class="line">    <span class="keyword">if</span> (tokenInfo.<span class="property">token</span> &amp;&amp; tokenInfo.<span class="property">tokenExpireTime</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">      <span class="keyword">if</span> (now &gt;= tokenInfo.<span class="property">tokenExpireTime</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里已经过期了。</span></span><br><span class="line">        <span class="comment">//返回一个Promise，执行refreshToken后再return当前的config</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">refreshToken</span>()</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token, tokenExprieIn &#125; = res.<span class="property">data</span>;</span><br><span class="line">            <span class="comment">//重新把时间段转成绝对时间存起来</span></span><br><span class="line">            <span class="keyword">const</span> tokenExpireTime = now + tokenExprieIn * <span class="number">1000</span>;</span><br><span class="line">            instance.<span class="title function_">setToken</span>(&#123; token, tokenExpireTime &#125;); <span class="comment">// 存token到localStorage</span></span><br><span class="line">            config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = token; <span class="comment">// 请求头重新赋值token</span></span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;token刷新error&#x27;</span>, res);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-多个请求的情况"><a href="#2-多个请求的情况" class="headerlink" title="2.多个请求的情况"></a>2.多个请求的情况</h3><p>当刷新 token 的时间需要发送请求，则将这些请求缓存起来。使用一个 isRefresh 来判断 token 是否正在刷新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">isRefresh = false</span><br><span class="line"></span><br><span class="line">instance.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">   //这里不单单是获取到token，还要一个token的过期时间，用来进行下面的判断</span><br><span class="line">   const tokenInfo = getToken()</span><br><span class="line">   /**</span><br><span class="line">    * 这里模拟一下tokenInfo的结构</span><br><span class="line">    * tokenInfo：&#123;</span><br><span class="line">    * token:&#x27;fdasfeffafdsfasfdasfdas&#x27;,</span><br><span class="line">    * tokenExpireTime:&#x27;36000&#x27;</span><br><span class="line">    * &#125;</span><br><span class="line">    */</span><br><span class="line">   //这里先拿到token，给每个请求添加一个token请求头</span><br><span class="line">     config.headers[&#x27;token&#x27;] = tokenInfo.token</span><br><span class="line"></span><br><span class="line">   // 注意：登录接口和刷新token接口是不需要token的</span><br><span class="line">     if (config.url.indexOf(&#x27;/refreshToken&#x27;) &gt;= 0 || config.url.indexOf(&#x27;/login&#x27;) &gt;= 0) &#123;</span><br><span class="line">       return config</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   //这里是拦截的关键代码</span><br><span class="line">   if (tokenInfo.token &amp;&amp; tokenInfo.tokenExpireTime) &#123;</span><br><span class="line">         const now = Date.now()</span><br><span class="line">         if (now &gt;= tokenInfo.tokenExpireTime) &#123; // 这里已经过期了。</span><br><span class="line">             //返回一个Promise，执行refreshToken后再return当前的config</span><br><span class="line"></span><br><span class="line">             if (!isRefresh) &#123;</span><br><span class="line">                isRefresh = true</span><br><span class="line">                return refreshToken().then(res =&gt; &#123;</span><br><span class="line">                    const &#123; token, tokenExprieIn &#125; = res.data</span><br><span class="line">                    //重新把时间段转成绝对时间存起来</span><br><span class="line">                    const tokenExpireTime = now + tokenExprieIn * 1000</span><br><span class="line">                    instance.setToken(&#123; token, tokenExpireTime &#125;) // 存token到localStorage</span><br><span class="line">                    isRefresh = false //一旦刷新成功，再重置回去</span><br><span class="line">                    config.headers[&#x27;token&#x27;] = token // 请求头重新赋值token</span><br><span class="line">                    return config</span><br><span class="line">                &#125;).then((token) =&gt; &#123;</span><br><span class="line">                  console.log(&#x27;刷新token成功，执行队列&#x27;)</span><br><span class="line">                  //在token刷新成功后，才会继续执行队列</span><br><span class="line">                  requestsArr.forEach(item =&gt; item(token))</span><br><span class="line">                  // 执行完成后，清空队列</span><br><span class="line">                  requestsArr = []</span><br><span class="line">                &#125;).catch(res =&gt; &#123;</span><br><span class="line">                    console.error(&#x27;token刷新error&#x27;, res)</span><br><span class="line">                &#125;)</span><br><span class="line">             &#125;else&#123; //但是这样写还是会出问题，多次发起请求的顺序会乱，所以这边加个else</span><br><span class="line">                //这里第一个请求进不来</span><br><span class="line">                const retryOriginalRequest = new Promise((resolve) =&gt; &#123;</span><br><span class="line">                  requestsArr.push((token) =&gt; &#123;</span><br><span class="line">                    config.headers[&#x27;token&#x27;] = token</span><br><span class="line">                    resolve(config)</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">                return retryOriginalRequest</span><br><span class="line">              &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return config</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line"> return Promise.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="拓展-在响应拦截器中对-token-进行判断和刷新"><a href="#拓展-在响应拦截器中对-token-进行判断和刷新" class="headerlink" title="拓展-在响应拦截器中对 token 进行判断和刷新"></a>拓展-在响应拦截器中对 token 进行判断和刷新</h2><p>与后端约定，不需要传递 token 有效时间，在后端检验每次发起请求的 token 是否失效，如果失效返回一个状态码和新的 token，客户端保存新的 token，并携带新的 token 重新发起请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从localStorage中获取token</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLocalToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中</span></span><br><span class="line">instance.<span class="property">setToken</span> = <span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">  instance.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;X-Token&#x27;</span>] = token;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, token);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">refreshToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// instance是当前request.js中已创建的axios实例</span></span><br><span class="line">  <span class="keyword">return</span> instance.<span class="title function_">post</span>(<span class="string">&#x27;/refreshtoken&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">300000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Token&#x27;</span>: <span class="title function_">getLocalToken</span>(), <span class="comment">// headers塞token</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否正在刷新的标记</span></span><br><span class="line"><span class="keyword">let</span> isRefreshing = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 重试队列，每一项将是一个待执行的函数形式</span></span><br><span class="line"><span class="keyword">let</span> requests = [];</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">1234</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> config = response.<span class="property">config</span>;</span><br><span class="line">      <span class="keyword">if</span> (!isRefreshing) &#123;</span><br><span class="line">        isRefreshing = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">refreshToken</span>()</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token &#125; = res.<span class="property">data</span>;</span><br><span class="line">            instance.<span class="title function_">setToken</span>(token);</span><br><span class="line">            config.<span class="property">headers</span>[<span class="string">&#x27;X-Token&#x27;</span>] = token;</span><br><span class="line">            config.<span class="property">baseURL</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">// 已经刷新了token，将所有队列中的请求进行重试</span></span><br><span class="line">            requests.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(token));</span><br><span class="line">            requests = [];</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">instance</span>(config);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;refreshtoken error =&gt;&#x27;</span>, res);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            isRefreshing = <span class="literal">false</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 正在刷新token，将返回一个未执行resolve的promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span></span><br><span class="line">          requests.<span class="title function_">push</span>(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">            config.<span class="property">baseURL</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            config.<span class="property">headers</span>[<span class="string">&#x27;X-Token&#x27;</span>] = token;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="title function_">instance</span>(config));</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;开发合同管理系统时，要求用户前端登录后，后端提供一个 token 和 token 的有效时间，当 token 过期时要求使用旧 token </summary>
      
    
    
    
    <category term="token" scheme="https://zhdzb.github.io/categories/token/"/>
    
    
    <category term="token" scheme="https://zhdzb.github.io/tags/token/"/>
    
    <category term="身份认证" scheme="https://zhdzb.github.io/tags/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
</feed>
